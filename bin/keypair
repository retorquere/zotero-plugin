#!/usr/bin/env python3

from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
import sys, os, subprocess

script_name = os.path.basename(sys.argv[0])
if len(sys.argv) != 3:
  print(f'Usage: {script_name} <private key> <public key>')
  sys.exit(1)

script_name, private_key_file, public_key_file = sys.argv

def controlled(file_path):
  created_file = False

  try:
    if not os.path.exists(file_path):
      os.makedirs(os.path.dirname(os.path.abspath(file_path)), exist_ok=True)
      open(file_path, 'a').close()
      created_file = True

    result = subprocess.run(
        ['git', 'check-ignore', '--quiet', file_path],
        cwd=os.path.dirname(os.path.abspath(file_path)),
        check=False
    )

    return result.returncode != 0

  except FileNotFoundError:
    print("Git is not installed or not in the system's PATH.")
    sys.exit(1)

  except subprocess.CalledProcessError as e:
    print(f'Error checking ignore status: {e}')
    sys.exit(1)

  finally:
    if created_file and os.path.exists(file_path):
      os.remove(file_path)
def check_name(kind, file_path):
  if os.path.basename(file_path) != f'{kind}.pem':
    print(f'The {kind} key file must be named {kind}.pem')
    sys.exit(1)

  if (kind == 'private') == controlled(file_path):
    print(f'The {kind} key file must {"not " if kind == "private" else ""}be under source control')
    sys.exit(1)
check_name('private', private_key_file)
check_name('public', public_key_file)

private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
private_pem = private_key.private_bytes(
  encoding=serialization.Encoding.PEM,
  format=serialization.PrivateFormat.PKCS8,
  encryption_algorithm=serialization.NoEncryption()
)
with open(os.path.join(private_key_file), 'w') as f:
  print('creating private key', private_key_file)
  f.write(private_pem.decode('utf-8'))

public_key = private_key.public_key()
public_pem = public_key.public_bytes(
  encoding=serialization.Encoding.PEM,
  format=serialization.PublicFormat.SubjectPublicKeyInfo
)
with open(os.path.join(public_key_file), 'w') as f:
  print('creating public key', public_key_file)
  f.write(public_pem.decode('utf-8'))
